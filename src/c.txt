#include "main.h"
#include "pros/motors.hpp"
using namespace pros;

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
 
Controller master(E_CONTROLLER_MASTER);
Motor fl_mtr(11);
Motor bl_mtr(12);
Motor fr_mtr(1);
Motor br_mtr(2);

Motor_Group left_g ({fl_mtr, bl_mtr});
Motor_Group right_g ({fr_mtr, br_mtr});

Motor roller(5);

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {
	lcd::initialize();
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {
	left_g.move(-50);
	right_g.move(50);
	roller.move(-90);

	delay(1000);

	left_g.move(0);
	right_g.move(0);
	roller.move(0);
}

/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {
	int left;
	int right;
	bool trigger;


	while (true) {
		left = master.get_analog(ANALOG_LEFT_Y);
		right = master.get_analog(ANALOG_RIGHT_Y);

		if (master.get_digital(E_CONTROLLER_DIGITAL_RIGHT)) {
			roller.move(-127);
		} else if (master.get_digital(E_CONTROLLER_DIGITAL_LEFT)){
			roller.move(127);
		} else {
			roller.move(0);
		}

		left_g.move(-left);
		right_g.move(right);

		delay(20);
	}
}